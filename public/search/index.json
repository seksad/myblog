[{"content":"安装prometheus 创建/opt/prometheus/config和/opt/prometheus/data文件夹。\n1 2 mkdir /opt/prometheus/config mkdir /opt/prometheus/data 将下面2个文件，prometheus.yml和alert.rules.yml放到.config文件夹下面。\n这是prometheus.yml内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 global: scrape_interval: 15s rule_files: - /etc/prometheus/alert.rules.yml scrape_configs: - job_name: \u0026#39;prometheus\u0026#39; static_configs: - targets: [\u0026#39;localhost:9090\u0026#39;] alerting: alertmanagers: - static_configs: - targets: [\u0026#39;alertmanager:9093\u0026#39;] 这是alert.rules.yml内容\n1 2 3 4 5 6 7 8 9 10 11 groups: - name: example rules: - alert: InstanceDown expr: up == 0 for: 5m labels: severity: page annotations: summary: \u0026#34;Instance {{$labels.instance}} down\u0026#34; description: \u0026#34;{{$labels.instance}} of job {{$labels.job}} has been down for more than 5 minutes.\u0026#34; 然后，运行prometheus\n1 2 3 4 5 6 7 8 docker run -d --name prometheus \\ --restart=unless-stopped \\ --privileged=true \\ -u root \\ -p 9090:9090 \\ -v /opt/prometheus//config:/etc/prometheus \\ -v /opt/prometheus//data:/prometheus \\ prom/prometheus:latest 此时，访问ip:9090可以看到prometheus的网页\n安装node-exporter(收集主机数据) 1 2 3 4 5 6 7 8 docker run -d \\ --name node-exporter \\ --restart=unless-stopped \\ -p 9100:9100 \\ -v \u0026#34;/proc:/host/proc:ro\u0026#34; \\ -v \u0026#34;/sys:/host/sys:ro\u0026#34; \\ -v \u0026#34;/:/rootfs:ro\u0026#34; \\ prom/node-exporter:latest 访问http://ip:9100/metrics，即可看到监控的主机数据\n将node-exporter与prometheus添加到同一网络，然后修改prometheus.yml,改为如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 global: scrape_interval: 15s rule_files: - /etc/prometheus/alert.rules.yml scrape_configs: - job_name: \u0026#39;prometheus\u0026#39; static_configs: - targets: [\u0026#39;localhost:9090\u0026#39;] - job_name: linux static_configs: - targets: [\u0026#39;node-exporter:9100\u0026#39;] labels: instance: localhost # - targets: [\u0026#39;192.168.1.22:9100\u0026#39;] #这里添加targets，可以使用Prometheus监控其他装有node_exporter的节点，单节点则不需要 # labels: # instance: 192.168.1.22 alerting: alertmanagers: - static_configs: - targets: [\u0026#39;alertmanager:9093\u0026#39;] 安装 mysqld-exporter(收集主机数据) 1 2 3 4 5 6 docker run -d \\ --name mysqld_exporter \\ --restart=unless-stopped \\ -p 9104:9104 \\ -e DATA_SOURCE_NAME=\u0026#34;root:Password123@(172.17.0.2:3306)/\u0026#34; \\ prom/mysqld-exporter:latest 访问http://ip:9104/metrics，即可看到监控的主机数据\n将mysqld-exporter与prometheus添加到同一网络，然后修改prometheus.yml,改为如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 global: scrape_interval: 15s rule_files: - /etc/prometheus/alert.rules.yml scrape_configs: - job_name: \u0026#39;prometheus\u0026#39; static_configs: - targets: [\u0026#39;localhost:9090\u0026#39;] - job_name: linux static_configs: - targets: [\u0026#39;node-exporter:9100\u0026#39;] labels: instance: localhost # - targets: [\u0026#39;192.168.1.22:9100\u0026#39;] #这里添加targets，可以使用Prometheus监控其他装有node_exporter的节点，单节点则不需要 # labels: # instance: 192.168.1.22 - job_name: mysqld static_configs: - targets: [\u0026#39;172.17.0.3:9104\u0026#39;] labels: instance: mysql-exporter alerting: alertmanagers: - static_configs: - targets: [\u0026#39;alertmanager:9093\u0026#39;] 安装cadvisor(收集容器数据) 1 2 3 4 5 6 7 8 9 10 11 docker run \\ -v /:/rootfs:ro \\ -v /var/run:/var/run:ro \\ -v /sys:/sys:ro \\ -v /var/lib/docker/:/var/lib/docker:ro \\ -v /dev/disk/:/dev/disk:ro \\ -p 8080:8080 \\ -d --name=cadvisor \\ --privileged \\ --restart=unless-stopped \\ google/cadvisor:latest 访问http://ip:8080/metrics，即可看到监控的容器的数据\n将cadvisor与prometheus添加到同一网络，然后修改prometheus.yml,改为如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 global: scrape_interval: 15s rule_files: - /etc/prometheus/alert.rules.yml scrape_configs: - job_name: \u0026#39;prometheus\u0026#39; static_configs: - targets: [\u0026#39;localhost:9090\u0026#39;] - job_name: linux static_configs: - targets: [\u0026#39;node-exporter:9100\u0026#39;] labels: instance: localhost # - targets: [\u0026#39;192.168.1.22:9100\u0026#39;] #这里添加targets，可以使用Prometheus监控其他装有node_exporter的节点，单节点则不需要 # labels: # instance: 192.168.1.22 - job_name: mysqld static_configs: - targets: [\u0026#39;172.17.0.3:9104\u0026#39;] labels: instance: mysql-exporter - job_name: cadvisor static_configs: - targets: [\u0026#39;cadvisor:8080\u0026#39;] labels: instance: cAdvisor alerting: alertmanagers: - static_configs: - targets: [\u0026#39;alertmanager:9093\u0026#39;] 安装grafana 创建目录/opt/grafana/\n1 mkdir /opt/grafana 然后启动grafana\n1 2 3 4 5 6 docker run -d \\ -p 3000:3000 \\ --name grafana \\ -v /opt/grafana/data:/var/lib/grafana \\ -v /etc/localtime:/etc/localtime \\ grafana/grafana:latest 然后访问http://ip:3000进入grafana，\npass\n添加数据源-\u0026gt;选择prometheus 导入面板 输入id\n12633\n8919\n更多grafana模板: https://grafana.com/grafana/dashboards 搜索 相应 dashboards的id如8919，12227\n","date":"2024-12-17T23:42:40Z","permalink":"http://localhost:1313/p/grafana-prometheus%E7%AE%80%E5%8D%95%E7%9B%91%E6%8E%A7/","title":"grafana+prometheus简单监控"},{"content":"搭建rpg小游戏 browserquest 1 2 3 4 5 6 docker run -d \\ -p 8000:8000 \\ -p 8787:8787 \\ --name rpg \\ -e HOST_IP=your-ip \\ registry.cn-guangzhou.aliyuncs.com/welldene/games:rpg_game 浏览器输入your-ip:8787\n","date":"2024-11-21T20:02:40Z","permalink":"http://localhost:1313/p/%E6%90%AD%E5%BB%BArpg%E5%B0%8F%E6%B8%B8%E6%88%8F-browserquest/","title":"搭建rpg小游戏 browserquest"},{"content":"Windows 配置 Debian虚拟机及Xshell连接 VMware 1.下载 1. 前往官网下载最新版本：https://www.vmware.com/ 由于小编也没找到所以没法给路径\n2. 使用网盘里的库存： http://47.97.115.73:5244/d/%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/VMware-workstation-full-17.5.2-23775571.exe?sign=H3kDu7HVdj5Ael3csoRl2oAdpegT-UrBLnGJXvnE9Gg=:0\n2.安装 这里提供一篇社区大佬做的教程：如何在Windows电脑上安装Linux虚拟机，以及Linux基本命令_windows安装linux虚拟机-CSDN博客\n1.点击下一步 2.点击左下角的\u0026lt;接收许可\u0026gt; ，然后点击下一步 3.点击右上角的\u0026lt;更改\u0026gt;，点击中上白色框选择安装到的盘，新建文件夹VMware，点击确定 4.勾选的不重要，点击下一步 5.点击下一步 6.点击下一步 7.点击 安装 并等待，中间可能会出现一些异象，但是不重要 8.点击完成 9.出现弹窗 提示要重启，确认无误后重启。\n3.启动VMware 打开桌面创建的快捷方式 如果遇到激活的问题，可以前往此处 获取激活码\n4.安装虚拟机 本次使用的系统是debian系统，映像文件点击此处获取 1.打开VMware，点击右侧的\u0026lt;创建新的虚拟机\u0026gt;，选择\u0026lt;典型\u0026gt;，然后点击下一步 2.看到中间那一栏，若已自动选中则跳过这一步，直接点击下一步即可。 点击\u0026lt;浏览\u0026gt;，选中要安装的映像文件，点击下一步 3. 第一栏中，命名自己的虚拟机名字；第二栏中选择安装的位置。都配置好后点击下一步 4. 默认即可，点击下一步 5.勾选\u0026lt;创建后开启此虚拟机\u0026gt;，点击完成。\nDebian 按如下操作走： 通过↑↓键，选中graphic install，然后回车\n选择中文(简体)，点击continue\n选择中国，点击 继续\n选择汉语，点击继续\n等待加载\n命名主机名称\n域名不管，直接回车即可\n设置自己的管理员密码\n命名一个非管理员账户\n设置非管理员账户密码\n等待加载\n选择\u0026lt;向导-使用整个磁盘\u0026gt;，点击继续\n这里是选择的磁盘，由于是单独分出来的一块，直接点击继续\n不用管文件分区，点击继续\n点击继续即可\n选\u0026lt;是\u0026gt;，然后点击继续\n选\u0026lt;否\u0026gt;，然后点击继续\n等待加载\n选择中国，点击继续\n若在安徽地区，则选择\u0026lt;mirrors.ustc.edu.cn\u0026gt;这是中科大的镜像站点；若不在其周边，则选择\u0026lt;mirrors,163.com\u0026gt;这是网易的站点\nhttp代理留空即可，点击继续\n等待加载\n选择\u0026lt;否\u0026gt;，点击继续\n在软件选择界面，去掉Debian桌面环境选项，因为这是虚拟机，用桌面会很卡并造成不必要的负担，然后点击继续\n等待加载\n选择\u0026lt;否\u0026gt;，点击继续\n点击继续，再点击继续即可\n安装完成，点击继续\n","date":"2024-11-20T21:02:40Z","permalink":"http://localhost:1313/p/windows%E9%85%8D%E7%BD%AEdebian%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BB%A5%E5%8F%8Axshell%E8%BF%9E%E6%8E%A5/","title":"Windows配置debian虚拟机以及Xshell连接"},{"content":"Windows 配置go环境 本笔记参考于CSDN上一篇教程，点击次处查看原教程 1.go的下载 官网下载：https://golang.google.cn/ 点击此处下载\n如果嫌慢的话也可以尝试下面这个\nAlist云端下载：点击此处跳转\n2.go的安装 双击.msi文件打开\n点击next\n点击next\n设置自己喜欢的路径后，点击next\n点击install\n这个时候后弹出来一个窗口，询问是否安装，此时点击 是 即可\n点击finish\n3.检查go的文件 此时进入刚刚安装的go的根目录，核对以下文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 api bin doc lib misc pkg src test codereview.cfg CONTRIBUTING.md go.env LICENSE PATENTS README.md SECURITY.md VERSION 核对后，进入bin文件夹，打开go.exe进入go编译器，若能正常运行进入下一步\n4.配置go环境 在设置中找到\u0026lt;环境变量\u0026gt;(不同版本系统位置不同，紧粗略说明)\n进入\u0026lt;系统属性\u0026gt;后，点击右下角\u0026lt;环境变量\u0026gt;\n在下方的\u0026lt;系统变量\u0026gt;中找到\u0026lt;Path变量\u0026gt;，双击打开\n在列表中查看，若没有出现\u0026lt;\\go\\bin\u0026gt;格式的路径，则进行第五步，有则跳过\n找到安装的go的bin文件夹，复制改路径，回到\u0026lt;编辑环境变量\u0026gt;界面，点击右上角的\u0026lt;新建\u0026gt;，粘贴路径，点击右下角\u0026lt;确定\u0026gt;即可\n5.转移文件安放位置(选做) 若不想在go的根目录下存储代码的话，可以根据如下操作：\n在想存储代码的地方创建一个文件夹(不包含非法字符和中文)\n在此文件夹中再创建3个文件夹，名称及功能如下： bin : 可执行文件存储位置 pkg：生成的包文件的位置 src : 项目的位置\n修改环境变量：\n打开\u0026lt;环境变量\u0026gt;,找到上方的\u0026lt;用户变量\u0026gt;中的\n双击打开，复制之前创建的文件夹位置并粘贴替换到下面那一行的路径(变量值)\n找到，若无则新建一个即可，变量值为go的根目录\n找到若无则创建，变量值为创建的文件夹下的bin地址\n测试： 在cmd下运行 go run app.go 若成功运行则完成安装\n","date":"2024-11-20T18:02:40Z","permalink":"http://localhost:1313/p/windows%E9%85%8D%E7%BD%AEgo%E8%AF%AD%E8%A8%80/","title":"Windows配置go语言"},{"content":"docker简略使用教程 直接启动 拉取镜像 1 docker pull xhofe/alist:latest 运行容器 1 2 3 4 5 6 7 docker run -it xhofe/alist:latest # 进容器 docker run -d xhofe/alist:latest # 后台运行容器 docker run -d --name=test xhofe/alist:latest # 指定容器名字为 test docker run -d --restart=unless-stopped --name=test xhofe/alist:latest # 指定容器一直重启-p 5244:5244 docker run -d -p 5244:5244 xhofe/alist:latest # 指定容器端口, 主机端口:容器端口 docker run -d -v /etc/alist:/opt/alist/data -v /etc/alisttest:/opt/alist/datatest xhofe/alist:latest # 指定存储卷 主机路径:容器路径 docker run -d -e PUID=0 -e PGID=0 -e UMASK=022 xhofe/alist:latest # 添加环境变量 docker-compose启动 1 2 3 4 5 6 7 8 9 10 11 12 13 14 version: \u0026#39;3\u0026#39; services: alist1: image: \u0026#39;xhofe/alist:latest\u0026#39; container_name: alistsdfjdskfjk volumes: - \u0026#39;/etc/alist:/opt/alist/data\u0026#39; ports: - \u0026#39;5244:5244\u0026#39; environment: - PUID=0 - PGID=0 - UMASK=022 restart: unless-stopped 进入到docker-compose.yaml的那个目录\n执行\n1 docker-compose up -d # 后台运行容器编排 如果要关掉容器，执行\n1 docker-compose down # 关掉容器编排 ","date":"2024-11-17T17:00:00Z","permalink":"http://localhost:1313/p/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","title":"docker简单使用教程"},{"content":"Alist在宝塔面板中的搭建，本地存储及阿里云盘Opne的设置 Alist 下载 ： 使用宝塔Linux面板（详情可前往链接）中的软件商店进行傻瓜式下载（仅针宝塔面板生效的） 前往Alist官网获取更多详情，若想下载请移步此处 可使用1panel 平替宝塔面板，详情请点击此处查看安装教程，并前往软件商店进行安装 1panel/宝塔面板使用 在软件商店里点击alist，再点击启动即可 Docker的可以选择端口，例如12345，而不是Alist默认的5244\n访问 复制\u0026lt;服务状态-alist控制台访问地址\u0026gt;中的链接打开即可,或者在所在服务器后输入端口（默认端口为：5244）\n登陆 自己看\n本地存储配置 点击正下方\u0026lt;管理\u0026gt;，进入\u0026quot;AList管理\u0026quot;页面，点击\u0026lt;存储\u0026gt;，点击\u0026lt;添加\u0026gt; 驱动选择\u0026lt;本机存储\u0026gt;（在蓝奏云，分秒帧之间） 挂载路径填入\u0026lt;/\u0026ldquo;name\u0026rdquo;\u0026gt;格式（此处为网盘中显示的文件夹） 根文件夹路径填入\u0026lt;/\u0026ldquo;RealName\u0026rdquo;\u0026gt;(此处为网盘读取的根目录，要填本地存在的文件夹) 其余不需要进行多余操作，记得选择排序即可 ### 查看： 点击左侧\u0026lt;主页\u0026gt;即可返回网盘主页，可以看到刚刚添加的文件夹 需要注意的是，挂载路径填入的最后一位，会表现为顶替 根目录的头路径\n拓展： 可以重复上述\u0026lt;配置存储\u0026gt;操作建立多个文件夹 需要声明的是，每个存储只会读取一个根目录\n设置用户访问： 在\u0026lt;Alist管理\u0026gt;界面中，点击\u0026lt;用户\u0026gt;，点击\u0026lt;guest-编辑\u0026gt;，启用即可\n阿里云存储配置： 获取更多详细教程，请阅读官方教程 进入Alsit管理界面，选择存储，选择添加，驱动选择`阿里云盘Open`` 需要设置的如下：\n挂载路径：\n也就是网盘中显示的名字\n云盘类型 资源库：指云盘内除备份文件夹以外的文件夹 备份盘：指云盘内的备份文件夹 根文件ID：指用网址表示的文件夹代码 获取方式： 通过网页进入阿里云盘，进入你要导入的文件夹，例如https://www.alipan.com/drive/file/all/25a，其中25a就是文件夹的代码（这个位置的代码即可），然后将此填入即可 刷新令牌： 点击此处进入获取 操作方式： 点击 Go to login，这时候如果已经在网页上登录了阿里云盘，则在跳转后点击允许，然后便会自动获得refreshToken，复制后填入即可\n其他： 不建议启用 秒传 功能，此功能会预存储文件进服务器，会造成不必要的占用，属于是用空间换取时间 其余设置不重要，按喜好设置即可 保存后回到 主页 就能看到存储进的文件夹了 Alist美化 在Alist管理界面，点击设置，点击全局，注意看到自定义头部和自定义内容\n可以去网上搜索Alist美化，然后去复制别人的 想自制的建议去搜索CSS文件相关教程，这里提供一个参考 下面内容中有可以参考的简化的头文件以及自定义内容，是一个渐变背景，也就是本人的网盘使用的简易背景 配置好后记得翻到最下面 保存\n附件：本人使用的简易头文件及自定义内容\n头文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=String.prototype.replaceAll\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://npm.elemecdn.com/lxgw-wenkai-webfont@1.1.0/lxgwwenkai-regular.css\u0026#34; /\u0026gt; \u0026lt;style\u0026gt; .notify-render .hope-close-button{ display: none; } #canvas-basic { position: fixed; display: block; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0; z-index: -999; backdrop-filter: blur(10px)!important; } #root \u0026gt; .header { background: rgba(255, 255, 255, 0); } .hope-ui-light .body \u0026gt; .nav { background-color: rgba(255, 255, 255, 0.2); border-radius: var(--hope-radii-xl); } .hope-ui-dark .body \u0026gt; .nav { background-color: rgb(0 0 0 / 50%); border-radius: var(--hope-radii-xl); } .body \u0026gt; .nav::after { display: none; } .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-iigjoxS-css{ background-color:rgb(0 0 0 / 50%) !important; } .hope-c-PJLV.hope-c-PJLV-iiuDLME-css{ background-color:rgb(0 0 0 / 50%) !important; } .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-igScBhH-css { background-color: rgba(255, 255, 255, 0.2) !important; backdrop-filter: blur(10px)!important; } .hope-c-PJLV.hope-c-PJLV-ikSuVsl-css{ background-color: rgba(255, 255, 255, 0.2) !important; backdrop-filter: blur(10px)!important; } .hope-c-ivMHWx-hZistB-cv.hope-icon-button{ background-color: rgba(255, 255, 255, 0.2) !important; backdrop-filter: blur(10px)!important; } .hope-c-PJLV-ijgzmFG-css{ background-color: rgba(255, 255, 255, 0.2) !important; backdrop-filter: blur(10px)!important; } .hope-ui-light pre{ background-color: rgba(255, 255, 255, 0.2) !important; backdrop-filter: blur(10px)!important; } .hope-ui-dark pre { background-color: rgba(255, 255, 255, 0) !important; backdrop-filter: blur(10px)!important; } *{font-family:LXGW WenKai} *{font-weight:bold} body {font-family: LXGW WenKai;} \u0026lt;/style\u0026gt; 自定义内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;canvas id=\u0026#34;canvas-basic\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;script src=\u0026#34;https://npm.elemecdn.com/granim@2.0.0/dist/granim.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var granimInstance = new Granim({ element: \u0026#39;#canvas-basic\u0026#39;, direction: \u0026#39;left-right\u0026#39;, isPausedWhenNotInView: true, states : { \u0026#34;default-state\u0026#34;: { gradients: [ [\u0026#39;#a18cd1\u0026#39;, \u0026#39;#fbc2eb\u0026#39;], [\u0026#39;#fff1eb\u0026#39;, \u0026#39;#ace0f9\u0026#39;], [\u0026#39;#d4fc79\u0026#39;, \u0026#39;#96e6a1\u0026#39;], [\u0026#39;#a1c4fd\u0026#39;, \u0026#39;#c2e9fb\u0026#39;], [\u0026#39;#a8edea\u0026#39;, \u0026#39;#fed6e3\u0026#39;], [\u0026#39;#9890e3\u0026#39;, \u0026#39;#b1f4cf\u0026#39;], [\u0026#39;#a1c4fd\u0026#39;, \u0026#39;#c2e9fb\u0026#39;], [\u0026#39;#fff1eb\u0026#39;, \u0026#39;#ace0f9\u0026#39;] ] } } }); \u0026lt;/script\u0026gt; ","date":"2024-11-15T17:00:00Z","permalink":"http://localhost:1313/p/alist%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA%E7%BE%8E%E5%8C%96%E5%B9%B6%E6%8C%82%E8%BD%BD%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/","title":"AList宝塔面板搭建,美化并挂载到阿里云盘"},{"content":"Alist 下载： 使用宝塔Linux面板中的软件商店进行傻瓜式下载（仅针宝塔面板生效的） 下载链接 使用： 在软件商店里点击 alist，再点击启动即可\n访问： 复制 \u0026lt;服务状态-alist控制台访问地址\u0026gt; 中的链接打开即可\n登陆： 自己看\n配置储存： 点击正下方 \u0026lt;管理\u0026gt;，进入 \u0026ldquo;AList管理\u0026rdquo; 页面，点击 \u0026lt;存储\u0026gt;，点击 \u0026lt;添加\u0026gt;\n驱动选择 \u0026lt;本机存储\u0026gt;（在蓝奏云，分秒帧之间）\n挂载路径填入 \u0026lt;/\u0026quot;name\u0026quot;\u0026gt; 格式（此处为网盘中显示的文件夹）\n根文件夹路径填入 \u0026lt;/\u0026quot;RealName\u0026quot;\u0026gt;（此处为网盘读取的根目录，要填本地存在的文件夹）\n其余不需要进行多余操作，记得选择排序即可\n查看： 点击左侧 \u0026lt;主页\u0026gt; 即可返回网盘主页，可以看到刚刚添加的文件夹\n需要注意的是，挂载路径填入的最后一位，会表现为顶替根目录的头路径\n拓展： 可以重复上述 \u0026lt;配置存储\u0026gt; 操作建立多个文件夹\n需要声明的是，每个存储只会读取一个根目录\n访问： 在 \u0026lt;Alist管理\u0026gt; 界面中，点击 \u0026lt;用户\u0026gt;，点击 \u0026lt;guest-编辑\u0026gt;，启用即可\n穿透 特别提醒：不要用 https://docs.locyanfrp.cn/ 这个网站因为片哥因为封了国内的站点，不能用了\n这里使用 natapp 作为首选，虽然只能提供一个 http 协议隧道，但是新手可以直接用\nNATAPP 登录 首先打开支付宝，然后进入 NATAPP，进行登录\n由于未知原因无法通过常规扫码登录，所以期间需要进入支付宝进行验证\n实名认证 点击左侧 \u0026lt;我的账户-实名认证\u0026gt; 进行认证\n购买隧道 点击左上角 \u0026lt;购买隧道\u0026gt;，设置名称，\u0026lt;隧道协议\u0026gt; 选择 \u0026lt;http\u0026gt;（或者是 Web）\n（其中的 UDP 和 TCP 是游戏或视频服务器使用的）\n然后 \u0026lt;本地端口\u0026gt; 填入 \u0026lt;5244\u0026gt;（也就是 AList 的端口）\n点击 \u0026lt;免费购买\u0026gt;\n使用隧道 点击 \u0026lt;我的隧道\u0026gt;，复制 \u0026lt;authtoken\u0026gt;\n进入 \u0026lt;宝塔Linux面板\u0026gt;，并进入 \u0026lt;终端\u0026gt;，输入以下指令\n1 2 3 4 cd // cd opt sudo chmod a+x natapp ./natapp -authtoken=\u0026lt;yourAuthtokenName\u0026gt; 随后终端应当进入界面，其中的 \u0026lt;Forwarding\u0026gt; 后面紧跟的就是本次连接时分配的随机域名，格式一般为 http://\u0026lt;name\u0026gt;.natappfree.cc\n访问 直接访问 http://\u0026lt;name\u0026gt;.natappfree.cc 格式的网站即可访问\n","date":"2024-11-12T17:00:00Z","permalink":"http://localhost:1313/p/alist%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%8F%8Anatapp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","title":"AList本地存储及NATAPP内网穿透"},{"content":"Welcome to Hugo theme Stack. This is your first post. Edit or delete it, then start writing!\nFor more information about this theme, check the documentation: https://stack.jimmycai.com/\nWant a site like this? Check out hugo-theme-stack-stater\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2024-05-05T00:00:00Z","image":"http://localhost:1313/p/hello-world/cover_hu6307248181568134095.jpg","permalink":"http://localhost:1313/p/hello-world/","title":"Hello World"}]